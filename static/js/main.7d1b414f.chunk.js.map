{"version":3,"sources":["components/navbar.jsx","components/currencyPairDropdown.jsx","services/currencyPairService.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","react_router_dom","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","CurrencyPairDropDdown","_ref","currencyPairs","_useState","useState","_useState2","Object","slicedToArray","bids","setBids","_useState3","_useState4","asks","setAsks","_useState5","_useState6","loading","setLoading","_useState7","_useState8","toaster","setToaster","styles","listStyleType","textAlign","h2","marginLeft","htmlFor","style","fontSize","name","id","onChange","_ref2","target","socket","WebSocket","onopen","e","console","log","send","JSON","stringify","event","data","channel","concat","value","onmessage","_response$data","parse","toast","success","onclose","wasClean","alert","code","reason","onerror","error","message","disabled","selected","map","_ref3","url_symbol","key","bid","ask","GetCurrencyPairs","setCurrencyPairs","useEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","sent","t0","stop","apply","this","arguments","fetchCurrencyPair","currencyPairDropdown","App","Fragment","react_toastify","navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA6BeA,EAvBA,WACX,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iDACfJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,eAAeC,GAAG,KAAlC,yBAGAL,EAAAC,EAAAC,cAAA,UACEE,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,sBACZC,gBAAc,qBACdC,gBAAc,QACdC,aAAW,qBAEXX,EAAAC,EAAAC,cAAA,QAAME,UAAU,oGCyGXQ,EA1He,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,cAAoBC,EAC3BC,qBAD2BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5CK,EAD4CH,EAAA,GACtCI,EADsCJ,EAAA,GAAAK,EAE3BN,qBAF2BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE5CE,EAF4CD,EAAA,GAEtCE,EAFsCF,EAAA,GAAAG,EAGrBV,oBAAS,GAHYW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG5CE,EAH4CD,EAAA,GAGnCE,EAHmCF,EAAA,GAAAG,EAIrBd,oBAAS,GAJYe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI5CE,EAJ4CD,EAAA,GAInCE,EAJmCF,EAAA,GA4E7CG,EAAS,CACbC,cAAe,OACfC,UAAW,SAGRC,EAAK,CACPC,WAAa,SAIhB,OACEtC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,SAAOqC,QAAQ,eAAeC,MAAO,CAACC,SAAY,KAAlD,iBACAzC,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,eAAetC,UAAU,eAAeuC,GAAG,eAAeC,SA/EtD,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACtBjB,GAAW,GAEX,IAAIkB,EAAS,IAAIC,UAAU,yBAG3BD,EAAOE,OAAS,SAASC,GACvBC,QAAQC,IAAI,iDAGZL,EAAOM,KACLC,KAAKC,UAAU,CACbC,MAAO,kBACPC,KAAM,CACJC,QAAO,cAAAC,OAAgBb,EAAOc,WAMpCb,EAAOM,KACLC,KAAKC,UAAU,CACbC,MAAO,gBACPC,KAAM,CACJC,QAAO,cAAAC,OAAgBb,EAAOc,YAOtCb,EAAOc,UAAY,SAASL,GACxBvB,GAAW,GAGb,IAJiC6B,EAIhBR,KAAKS,MAAMP,EAAMC,MACJA,KAAvBrC,EAL0B0C,EAK1B1C,KAAMI,EALoBsC,EAKpBtC,KACbH,EAAQD,GACRK,EAAQD,GACRK,GAAW,IAGNG,GACCgC,IAAMC,QAAQ,yDAKtBlB,EAAOmB,QAAU,SAASV,GACxB3B,GAAW,GACP2B,EAAMW,SACRC,MAAK,2CAAAT,OAA4CH,EAAMa,KAAlD,YAAAV,OAAiEH,EAAMc,SAI5EF,MAAM,4BAKVrB,EAAOwB,QAAU,SAASC,GACxB3C,GAAW,GACXuC,MAAK,WAAAT,OAAYa,EAAMC,aAkBpBzE,EAAAC,EAAAC,cAAA,UAAQwE,UAAQ,EAACC,UAAQ,EAAEf,MAAM,IAAjC,gEACC9C,EAAc8D,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,WAAYpC,EAAdmC,EAAcnC,KAAd,OAClB1C,EAAAC,EAAAC,cAAA,UAAQ6E,IAAKD,EAAYlB,MAAOkB,GAC7BpC,MAILd,GAAW5B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAC1BgB,GAAQI,GACRxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,MAAIsC,MAAOH,GAAX,QAEIjB,EAAKwD,IAAI,SAAAI,GAAG,OACRhF,EAAAC,EAAAC,cAAA,MAAIsC,MAAON,EAAQ6C,IAAKC,EAAI,IAAKA,EAAI,GAArC,UAAgDA,EAAI,GAApD,WAIVhF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,MAAIsC,MAAOH,GAAX,QAEKb,EAAKoD,IAAI,SAAAK,GAAG,OACXjF,EAAAC,EAAAC,cAAA,MAAIsC,MAAON,EAAQ6C,IAAKE,EAAI,IAAKA,EAAI,GAArC,UAAgDA,EAAI,GAApD,cChHb,SAASC,IAAmB,IAAAnE,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBD,EADwBG,EAAA,GACTkE,EADSlE,EAAA,GAejC,OAZEmE,oBAAU,YACiB,eAAAvE,EAAAK,OAAAmE,EAAA,EAAAnE,CAAAoE,EAAArF,EAAAsF,KAAG,SAAAC,IAAA,IAAA3C,EAAAY,EAAA,OAAA6B,EAAArF,EAAAwF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEGC,IAAMC,IAAI,uDAFb,OAAAjD,EAAA6C,EAAAK,KAEXtC,EAFWZ,EAEXY,KACP0B,EAAiB1B,GAHCiC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAKlB1B,IAAMQ,MAAN,GAAAb,OAAA+B,EAAAM,GAAA,qEALkB,yBAAAN,EAAAO,SAAAT,EAAA,iBAAH,yBAAA3E,EAAAqF,MAAAC,KAAAC,aAAA,EAQvBC,IACD,IAEErG,EAAAC,EAAAC,cAACoG,EAAD,CAAuBxF,cAAeA,ICFhCyF,MAVf,WACE,OACEvG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuG,SAAA,KACExG,EAAAC,EAAAC,cAACuG,EAAA,EAAD,MACAzG,EAAAC,EAAAC,cAACwG,EAAD,MACA1G,EAAAC,EAAAC,cAACgF,EAAD,QCDcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTNC,IAASC,OAAOjH,EAAAC,EAAAC,cAACgH,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d1b414f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n  } from \"react-router-dom\"\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <Router>\r\n        <nav className=\"navbar  navbar-expand-lg navbar-dark  bg-dark\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Crypto Order Book App\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNavAltMarkup\"\r\n          aria-controls=\"navbarNavAltMarkup\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n      </nav>\r\n      </Router>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst CurrencyPairDropDdown = ({ currencyPairs }) => {\r\n  const [bids, setBids] = useState();\r\n  const [asks, setAsks] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [toaster, setToaster] = useState(false);\r\n\r\n \r\n\r\n\r\n\r\n  const handleChange = ({ target }) => {\r\n    setLoading(true);\r\n    //Bitstamp server\r\n    let socket = new WebSocket(\"wss://ws.bitstamp.net\");\r\n\r\n    //connect to bitstamp server here\r\n    socket.onopen = function(e) {\r\n      console.log(\"[open] Connection established, send -> server\");\r\n\r\n      //send to bitstamp server to unsubscribe from the previous selected channel in the dropdown\r\n      socket.send(\r\n        JSON.stringify({\r\n          event: \"bts:unsubscribe\",\r\n          data: {\r\n            channel: `order_book_${target.value}`\r\n          }\r\n        })\r\n      );\r\n\r\n      //send to bitstamp server to subscribe to the newly selected channel in the dropdown\r\n      socket.send(\r\n        JSON.stringify({\r\n          event: \"bts:subscribe\",\r\n          data: {\r\n            channel: `order_book_${target.value}`\r\n          }\r\n        })\r\n      );\r\n    };\r\n\r\n    //bitstamp server message returned here, pass the message to our state\r\n    socket.onmessage = function(event) {\r\n        setToaster(true);     \r\n\r\n      //console.log(`[message] Data received: ${event.data} <- server`);\r\n      const response = JSON.parse(event.data);\r\n      const {bids, asks} = response.data;\r\n      setBids(bids);\r\n      setAsks(asks);   \r\n      setLoading(false);\r\n    };\r\n        // display a toast notification\r\n        if(toaster) {\r\n            toast.success('Showing streaming order books (list of asks and bids)');\r\n        } \r\n   \r\n\r\n    //if there was a closed connecton between the browser and the server , or there was a network failure, handle it here\r\n    socket.onclose = function(event) {\r\n      setLoading(false);\r\n      if (event.wasClean) {\r\n        alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\r\n      } else {\r\n        // e.g. server process killed or network down\r\n        // event.code is usually 1006 in this case\r\n        alert(\"[close] Connection died\");\r\n      }\r\n    };\r\n\r\n    //if there was an error connecting to the server , handle it here..\r\n    socket.onerror = function(error) {\r\n      setLoading(false);\r\n      alert(`[error] ${error.message}`);\r\n    };\r\n  };\r\n\r\n  const styles = {\r\n    listStyleType: 'none',\r\n    textAlign: 'right'\r\n }\r\n\r\n const h2 = {\r\n     marginLeft : '216px'\r\n }\r\n\r\n\r\n  return (\r\n    <div className=\"form-group container\">\r\n      <label htmlFor=\"currencyPair\" style={{'fontSize': 20}}>Currency Pair</label>\r\n      <select name=\"currencyPair\" className=\"form-control\" id=\"currencyPair\" onChange={handleChange}>\r\n         <option disabled selected  value=\"\">Select to show streaming order books (list of bids and asks)</option>\r\n         {currencyPairs.map(({url_symbol, name}) => (\r\n          <option key={url_symbol} value={url_symbol}>\r\n            {name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      { loading && <div className=\"spinner\"></div> }\r\n      {(bids && asks) && (\r\n        <div className=\"mt-5 row\">\r\n            <div className=\"col-md-4\">\r\n              <h2 style={h2} >Bids</h2>\r\n              {\r\n                  bids.map(bid => (\r\n                      <li style={styles} key={bid[0]}>{bid[1]} BTC @ {bid[0]} USD</li>\r\n                  ))\r\n              }\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <h2 style={h2}>Asks</h2>\r\n              {\r\n                   asks.map(ask => (\r\n                    <li style={styles} key={ask[0]}>{ask[1]} BTC @ {ask[0]} USD</li>\r\n                ))\r\n              }\r\n            </div>  \r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyPairDropDdown;\r\n","import React, {useState ,useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport CurrencyPairDropDdown from '../components/currencyPairDropdown';\r\nimport {toast} from 'react-toastify';\r\n\r\nexport function GetCurrencyPairs() {\r\n    const [currencyPairs, setCurrencyPairs] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchCurrencyPair = async () => {\r\n            try {\r\n                const {data} = await axios.get('https://www.bitstamp.net/api/v2/trading-pairs-info/');\r\n                setCurrencyPairs(data);\r\n            } catch (error) {\r\n                toast.error(`${error}, unable to fetch currency pairs. Check your internet connection`);\r\n            }\r\n        };\r\n        fetchCurrencyPair();\r\n    }, []);\r\n  \r\n  return <CurrencyPairDropDdown currencyPairs={currencyPairs} />;\r\n}\r\n","import React from 'react';\nimport Navbar from './components/navbar';\nimport './App.css';\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { GetCurrencyPairs } from './services/currencyPairService';\n\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer />\n      <Navbar/>\n      <GetCurrencyPairs/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}